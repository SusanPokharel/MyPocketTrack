@* @page "/debt" *@
@* @using System.Linq *@
@* @using Components.Models *@
@* @using MyPocketTrack.Components.Services *@
@* @inject TransactionService TransactionService *@
@* *@
@* <div class="container-fluid p-4"> *@
@*     <div class="row"> *@
@*         <!-- Summary Cards --> *@
@*         <div class="col-12 col-md-4 mb-4"> *@
@*             <div class="card shadow text-center" style="background: linear-gradient(135deg, #f7971e, #ffd200); color: white;"> *@
@*                 <div class="card-body"> *@
@*                     <h5 class="card-title">Remaining Debt</h5> *@
@*                     <p class="card-text display-6">@remainingDebt.ToString("C")</p> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*         <div class="col-12 col-md-4 mb-4"> *@
@*             <div class="card shadow text-center" style="background: linear-gradient(135deg, #00c6ff, #0072ff); color: white;"> *@
@*                 <div class="card-body"> *@
@*                     <h5 class="card-title">Total Debt</h5> *@
@*                     <p class="card-text display-6">@totalDebt.ToString("C")</p> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*         <div class="col-12 col-md-4 mb-4"> *@
@*             <div class="card shadow text-center" style="background: linear-gradient(135deg, #a770ef, #cf8bf3); color: white;"> *@
@*                 <div class="card-body"> *@
@*                     <h5 class="card-title">Pending Debts</h5> *@
@*                     <p class="card-text display-6">@PendingDebts.Count</p> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* *@
@*     <!-- Filters --> *@
@*     <MudPaper Elevation="3" Class="p-4 mb-4"> *@
@*         <MudGrid> *@
@*             <MudItem xs="12" md="3"> *@
@*                 <MudSelect T="string" Label="Tags" @bind-Value="FilterTag"> *@
@*                     @foreach (var tag in PredefinedTags) *@
@*                     { *@
@*                         <MudSelectItem Value="@tag">@tag</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*             </MudItem> *@
@*             <MudItem xs="12" md="3"> *@
@*                 <MudDateRangePicker Label="Date Range" @bind-DateRange="_dateRange"/> *@
@*             </MudItem> *@
@*             <MudItem xs="12" md="3"> *@
@*                 <MudTextField @bind-Value="SearchText" Label="Search" Adornment="Adornment.Start" *@
@*                               AdornmentIcon="@Icons.Material.Filled.Search"/> *@
@*             </MudItem> *@
@*         </MudGrid> *@
@*     </MudPaper> *@
@* *@
@*     <!-- Debt Transactions Table --> *@
@*     <MudPaper Elevation="3" Class="p-4"> *@
@*         <MudTable Items="@FilteredDebts" Dense="true" Hover="true" Bordered="true" Striped="true"> *@
@*             <ToolBarContent> *@
@*                 <MudText Typo="Typo.h6">Debt Transactions</MudText> *@
@*                 <MudSpacer/> *@
@*                 <MudButton Color="Color.Primary" OnClick="ClearFilters">Clear Filters</MudButton> *@
@*             </ToolBarContent> *@
@*             <HeaderContent> *@
@*                 <MudTh>Amount</MudTh> *@
@*                 <MudTh>Source</MudTh> *@
@*                 <MudTh>Description</MudTh> *@
@*                 <MudTh>Debt Taken Date</MudTh> *@
@*                 <MudTh>Debt Due Date</MudTh> *@
@*                 <MudTh>Debt Paid Date</MudTh> *@
@*                 <MudTh>Status</MudTh> *@
@*             </HeaderContent> *@
@*             <RowTemplate> *@
@*                 <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd> *@
@*                 <MudTd DataLabel="Source">@context.Source</MudTd> *@
@*                 <MudTd DataLabel="Description">@context.Description</MudTd> *@
@*                 <MudTd DataLabel="Debt Taken Date">@context.DebtTakenDate</MudTd> *@
@*                 <MudTd DataLabel="Debt Due Date"> *@
@*                     @(context.DebtDueDate.HasValue ? context.DebtDueDate.Value.ToShortDateString() : "N/A") *@
@*                 </MudTd> *@
@*                 <MudTd DataLabel="Debt Paid Date"> *@
@*                     @(context.DebtPaidDate.HasValue ? context.DebtPaidDate.Value.ToShortDateString() : "N/A") *@
@*                 </MudTd> *@
@*                 <MudTd DataLabel="Status"> *@
@*                     <MudChip T="string" *@
@*                              Text="@GetDebtStatusText(context.DebtStatus)" *@
@*                              Color="@GetDebtStatusColor(context.DebtStatus)"/> *@
@*                 </MudTd> *@
@*             </RowTemplate> *@
@*             <PagerContent> *@
@*                 <MudTablePager/> *@
@*             </PagerContent> *@
@*         </MudTable> *@
@*     </MudPaper> *@
@* </div> *@
@* *@
@* @code { *@
@*     private List<Transaction> transactions = new(); // Load transactions dynamically from the backend *@
@*     private List<Transaction> PendingDebts => transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtStatus == DebtsStatus.Pending).ToList(); *@
@* *@
@*     private string FilterTag { get; set; } = string.Empty; *@
@*     private string SearchText { get; set; } = string.Empty; *@
@*     private DateRange _dateRange = new(); *@
@* *@
@*     private decimal totalDebt; *@
@*     private decimal remainingDebt; *@
@* *@
@*     private readonly string[] PredefinedTags = new[] *@
@*     { *@
@*         "Income", *@
@*         "Housing", *@
@*         "Food", *@
@*         "Savings", *@
@*         "Shopping", *@
@*         "Bills", *@
@*         "Entertainment" *@
@*     }; *@
@* *@
@*     protected override Task OnInitializedAsync() *@
@*     { *@
@*         transactions = TransactionService.GetTransactions().ToList(); *@
@* *@
@*         totalDebt = transactions.Where(t => t.Type == TransactionsStatus.Debt).Sum(t => t.Amount); *@
@*         remainingDebt = transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtStatus == DebtsStatus.Pending).Sum(t => t.Amount); *@
@* *@
@*         return Task.CompletedTask; *@
@*     } *@
@* *@
@*     private IEnumerable<Transaction> FilteredDebts => *@
@*         transactions.Where(t => *@
@*             t.Type == TransactionsStatus.Debt && *@
@*             (string.IsNullOrEmpty(FilterTag) || t.Tags.Contains(FilterTag)) && *@
@*             (string.IsNullOrEmpty(SearchText) || t.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) && *@
@*             (!_dateRange.Start.HasValue || t.Date >= _dateRange.Start.Value) && *@
@*             (!_dateRange.End.HasValue || t.Date <= _dateRange.End.Value)); *@
@*      *@
@*     private Color GetDebtStatusColor(DebtsStatus? status) =>status *@
@*         status switch *@
@*         { *@
@*             DebtsStatus.Paid => Color.Success, *@
@*             DebtsStatus.Overdue => Color.Error, *@
@*             _ => Color.Warning *@
@*         }; *@
@* *@
@*     private string GetDebtStatusText(DebtsStatus? status) => *@
@*         status switch *@
@*         { *@
@*             DebtsStatus.Paid => "Paid", *@
@*             DebtsStatus.Overdue => "Overdue", *@
@*             _ => "Pending" *@
@*         }; *@
@* *@
@*     private void ClearFilters() *@
@*     { *@
@*         FilterTag = string.Empty; *@
@*         SearchText = string.Empty; *@
@*         _dateRange = new DateRange(); *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@* } *@



@page "/debt"
@using System.Linq
@using MyPocketTrack.Components.Models
@using MyPocketTrack.Components.Services
@inject TransactionService TransactionService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="container-fluid p-4">
    <!-- Summary Cards -->
    <div class="row">
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow text-center" style="background: linear-gradient(135deg, #f7971e, #ffd200); color: white;">
                <div class="card-body">
                    <h5 class="card-title">Remaining Debt</h5>
                    <p class="card-text display-6">@remainingDebt.ToString("C")</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow text-center" style="background: linear-gradient(135deg, #00c6ff, #0072ff); color: white;">
                <div class="card-body">
                    <h5 class="card-title">Total Debt</h5>
                    <p class="card-text display-6">@totalDebt.ToString("C")</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow text-center" style="background: linear-gradient(135deg, #a770ef, #cf8bf3); color: white;">
                <div class="card-body">
                    <h5 class="card-title">Cleared Debt</h5>
                    <p class="card-text display-6">@clearedDebt.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Top 5 Highest and Lowest Debt Transactions -->
    <div class="row">
        <!-- Top 5 Highest Debt Transactions -->
        <div class="col-12 col-md-6 mb-4">
            <MudPaper Elevation="3" Class="p-4">
                <MudTable Items="@TopHighestDebts" Dense="true" Hover="true" Bordered="true" Striped="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Top 5 Highest Debt Transactions</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Amount</MudTh>
                        <MudTh>Source</MudTh>
                        <MudTh>Description</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Amount.ToString("C")</MudTd>
                        <MudTd>@context.Source</MudTd>
                        <MudTd>@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </div>

        <!-- Top 5 Lowest Debt Transactions -->
        <div class="col-12 col-md-6 mb-4">
            <MudPaper Elevation="3" Class="p-4">
                <MudTable Items="@TopLowestDebts" Dense="true" Hover="true" Bordered="true" Striped="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Top 5 Lowest Debt Transactions</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Amount</MudTh>
                        <MudTh>Source</MudTh>
                        <MudTh>Description</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Amount.ToString("C")</MudTd>
                        <MudTd>@context.Source</MudTd>
                        <MudTd>@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </div>
    </div>

    <!-- Filters -->
    <MudPaper Elevation="3" Class="p-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudSelect T="string" Label="Tags" @bind-Value="FilterTag">
                    @foreach (var tag in TransactionService.PredefinedTags)
                    {
                        <MudSelectItem Value="@tag">@tag</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudDateRangePicker Label="Date Range" @bind-DateRange="_dateRange"/>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="SearchText" Label="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"/>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Debt Transactions Table -->
    <MudPaper Elevation="3" Class="p-4">
        <MudTable Items="@FilteredDebts" Dense="true" Hover="true" Bordered="true" Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Debt Transactions</MudText>
                <MudSpacer/>
                <MudButton Color="Color.Primary" OnClick="ClearFilters">Clear Filters</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Amount</MudTh>
                <MudTh>Source</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Debt Taken Date</MudTh>
                <MudTh>Debt Due Date</MudTh>
                <MudTh>Debt Paid Date</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                <MudTd DataLabel="Source">@context.Source</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Debt Taken Date">@context.DebtTakenDate?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Debt Due Date">@context.DebtDueDate?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Debt Paid Date">
                    @(context.DebtPaidDate.HasValue ? context.DebtPaidDate.Value.ToShortDateString() : "N/A")
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string"
                             Text="@GetDebtStatusText(context.DebtsStatus)"
                             Color="@GetDebtStatusColor(context.DebtsStatus)"/>
                </MudTd>
                <MudTd>
                    @if (context.DebtsStatus.HasValue && context.DebtsStatus == DebtsStatus.Pending)
                    {
                    <MudButton Color="Color.Success" Size="Size.Small" OnClick="() => ClearDebt(context)">Clear Debt</MudButton>
                    }
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </MudPaper>
</div>

@code {
    private List<Transaction> transactions = new();
    private decimal totalDebt;
    private decimal remainingDebt;
    private decimal clearedDebt;

    private string FilterTag { get; set; } = string.Empty;
    private string SearchText { get; set; } = string.Empty;
    private DateRange _dateRange = new();

    protected override async Task OnInitializedAsync()
    {
        await TransactionService.InitializeAsync();
        transactions = TransactionService.GetTransactions().ToList();
        CalculateSummaries();
    }

    private void CalculateSummaries()
    {
        totalDebt = transactions.Where(t => t.Type == TransactionsStatus.Debt).Sum(t => t.Amount);
        remainingDebt = transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtsStatus == DebtsStatus.Pending).Sum(t => t.Amount);
        clearedDebt = transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtsStatus == DebtsStatus.Paid).Sum(t => t.Amount);
    }

    private IEnumerable<Transaction> TopHighestDebts =>
        transactions.Where(t => t.Type == TransactionsStatus.Debt)
                    .OrderByDescending(t => t.Amount)
                    .Take(5);

    private IEnumerable<Transaction> TopLowestDebts =>
        transactions.Where(t => t.Type == TransactionsStatus.Debt)
                    .OrderBy(t => t.Amount)
                    .Take(5);

    private IEnumerable<Transaction> FilteredDebts =>
        transactions.Where(t =>
            t.Type == TransactionsStatus.Debt &&
            (string.IsNullOrEmpty(FilterTag) || t.Tags.Contains(FilterTag)) &&
            (string.IsNullOrEmpty(SearchText) || t.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) &&
            (!_dateRange.Start.HasValue || t.Date >= _dateRange.Start.Value) &&
            (!_dateRange.End.HasValue || t.Date <= _dateRange.End.Value));

    private Color GetDebtStatusColor(DebtsStatus? status) =>
        status switch
        {
            DebtsStatus.Paid => Color.Success,
            DebtsStatus.Overdue => Color.Error,
            _ => Color.Warning
        };

    private string GetDebtStatusText(DebtsStatus? status) =>
        status switch
        {
            DebtsStatus.Paid => "Paid",
            DebtsStatus.Overdue => "Overdue",
            _ => "Pending"
        };

    private async Task ClearDebt(Transaction debtTransaction)
    {
        var result = await TransactionService.ClearDebt(debtTransaction, remainingDebt);
        if (result == "Debt cleared successfully.")
        {
            Snackbar.Add(result, Severity.Success);
            transactions = TransactionService.GetTransactions().ToList();
            CalculateSummaries();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(result, Severity.Error);
        }
    }

    private void ClearFilters()
    {
        FilterTag = string.Empty;
        SearchText = string.Empty;
        _dateRange = new DateRange();
    }
}

