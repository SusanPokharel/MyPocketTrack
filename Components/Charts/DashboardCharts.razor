@using MyPocketTrack.Components.Models
@using MyPocketTrack.Components.Services
@using System.Linq

<div class="dashboard-charts">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else if (!Transactions.Any())
    {
        <MudAlert Severity="Severity.Info">No transaction data available for charts.</MudAlert>
    }
    else
    {
        <MudGrid>
            <!-- 1. Monthly Cash Flow Trend -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Monthly Cash Flow</MudText>
                    @if (_cashFlowSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Line"
                                 ChartSeries="@_cashFlowSeries"
                                 XAxisLabels="@_monthLabels"
                                 Width="100%" Height="300px">
                            <CustomGraphics>
                                <MudLegend Class="pa-4" Position="Position.Top"/>
                            </CustomGraphics>
                        </MudChart>
                    }
                </MudPaper>
            </MudItem>

            <!-- 2. Transaction Count Distribution -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Transaction Distribution</MudText>
                    @if (_transactionCountSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Bar"
                                 ChartSeries="@_transactionCountSeries"
                                 XAxisLabels="@_monthLabels"
                                 Width="100%" Height="300px">
                            <CustomGraphics>
                                <MudLegend Class="pa-4" Position="Position.Top"/>
                            </CustomGraphics>
                        </MudChart>
                    }
                </MudPaper>
            </MudItem>

            <!-- 3. Debt Status Distribution -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Debt Status Overview</MudText>
                    @if (_debtStatusData.Any())
                    {
                        <MudChart ChartType="ChartType.Pie"
                                 InputData="@_debtStatusData"
                                 InputLabels="@_debtStatusLabels"
                                 Width="100%" Height="300px" />
                    }
                </MudPaper>
            </MudItem>

            <!-- 4. Monthly Net Balance -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Monthly Net Balance</MudText>
                    @if (_netBalanceSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Bar"
                                 ChartSeries="@_netBalanceSeries"
                                 XAxisLabels="@_monthLabels"
                                 Width="100%" Height="300px" />
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</div>

@code {
    [Parameter]
    public List<Transaction> Transactions { get; set; } = new();

    private bool _isLoading = true;
    private List<ChartSeries> _cashFlowSeries = new();
    private List<ChartSeries> _transactionCountSeries = new();
    private List<ChartSeries> _netBalanceSeries = new();
    private double[] _debtStatusData = Array.Empty<double>();
    private string[] _debtStatusLabels = Array.Empty<string>();
    private double[] _amountRangeData = Array.Empty<double>();
    private string[] _amountRangeLabels = Array.Empty<string>();
    private string[] _monthLabels = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _isLoading = true;
            await LoadChartDataAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadChartDataAsync()
    {
        if (!Transactions.Any()) return;

        await Task.Run(() =>
        {
            var monthlyData = GetMonthlyData();
            LoadCashFlowChart(monthlyData);
            LoadTransactionCountChart(monthlyData);
            LoadDebtStatusChart();
            LoadNetBalanceChart(monthlyData);
        });
    }

    private List<MonthlyData> GetMonthlyData()
    {
        var sixMonthsAgo = DateTime.Now.AddMonths(-5);
        return Transactions
            .Where(t => t.Date >= sixMonthsAgo)
            .GroupBy(t => new { t.Date.Year, t.Date.Month })
            .OrderBy(g => g.Key.Year)
            .ThenBy(g => g.Key.Month)
            .Select(g => new MonthlyData
            {
                YearMonth = $"{g.Key.Year}/{g.Key.Month:00}",
                Inflow = g.Where(t => t.Type == TransactionsStatus.Inflow).Sum(t => (double)t.Amount),
                Outflow = g.Where(t => t.Type == TransactionsStatus.Outflow).Sum(t => (double)t.Amount),
                NewDebt = g.Where(t => t.Type == TransactionsStatus.Debt).Sum(t => (double)t.Amount),
                InflowCount = g.Count(t => t.Type == TransactionsStatus.Inflow),
                OutflowCount = g.Count(t => t.Type == TransactionsStatus.Outflow),
                DebtCount = g.Count(t => t.Type == TransactionsStatus.Debt)
            })
            .ToList();
    }

    private void LoadCashFlowChart(List<MonthlyData> monthlyData)
    {
        _monthLabels = monthlyData.Select(d => d.YearMonth).ToArray();
        _cashFlowSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Income", Data = monthlyData.Select(d => d.Inflow).ToArray() },
            new ChartSeries { Name = "Expenses", Data = monthlyData.Select(d => d.Outflow).ToArray() }
        };
    }

    private void LoadTransactionCountChart(List<MonthlyData> monthlyData)
    {
        _transactionCountSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Income", Data = monthlyData.Select(d => (double)d.InflowCount).ToArray() },
            new ChartSeries { Name = "Expenses", Data = monthlyData.Select(d => (double)d.OutflowCount).ToArray() },
            new ChartSeries { Name = "Debt", Data = monthlyData.Select(d => (double)d.DebtCount).ToArray() }
        };
    }

    private void LoadDebtStatusChart()
    {
        var debtsByStatus = Transactions
            .Where(t => t.Type == TransactionsStatus.Debt)
            .GroupBy(t => t.DebtsStatus)
            .Select(g => new
            {
                Status = g.Key?.ToString() ?? "Unknown",
                Amount = (double)g.Sum(t => t.Amount)
            })
            .Where(x => x.Amount > 0)
            .ToList();

        _debtStatusData = debtsByStatus.Select(x => x.Amount).ToArray();
        _debtStatusLabels = debtsByStatus.Select(x => x.Status).ToArray();
    }

    private void LoadNetBalanceChart(List<MonthlyData> monthlyData)
    {
        _netBalanceSeries = new List<ChartSeries>
        {
            new ChartSeries 
            { 
                Name = "Net Balance",
                Data = monthlyData.Select(d => d.Inflow - d.Outflow).ToArray()
            }
        };
    }

    private class MonthlyData
    {
        public string YearMonth { get; set; }
        public double Inflow { get; set; }
        public double Outflow { get; set; }
        public double NewDebt { get; set; }
        public int InflowCount { get; set; }
        public int OutflowCount { get; set; }
        public int DebtCount { get; set; }
    }
}