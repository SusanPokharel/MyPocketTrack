@using MyPocketTrack.Components.Models
@using MyPocketTrack.Components.Services

<div class="dashboard-charts">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else if (!Transactions.Any())
    {
        <MudAlert Severity="Severity.Info">No transaction data available for charts.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Transaction Flow Analysis</MudText>
                    @if (_transactionFlowSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Line" 
                                  ChartSeries="@_transactionFlowSeries"
                                  XAxisLabels="@_monthLabels"
                                  Width="100%" Height="300px" />
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Income vs Expenses</MudText>
                    @if (_incomeVsExpensesSeries.Any())
                    {
                        <MudChart ChartType="ChartType.Bar" 
                                  ChartSeries="@_incomeVsExpensesSeries"
                                  XAxisLabels="@_monthLabels"
                                  Width="100%" Height="300px" />
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Debt Distribution</MudText>
                    @if (_debtDistributionData.Any())
                    {
                        <MudChart ChartType="ChartType.Pie"
                                  InputData="@_debtDistributionData"
                                  InputLabels="@_debtStatusLabels"
                                  Width="100%" Height="300px" />
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">No debt data available.</MudAlert>
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Spending by Category</MudText>
                    @if (_categorySpendingData.Any())
                    {
                        <MudChart ChartType="ChartType.Donut"
                                  InputData="@_categorySpendingData"
                                  InputLabels="@_categoryLabels"
                                  Width="100%" Height="300px" />
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">No spending data available.</MudAlert>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</div>

@code {
    [Parameter]
    public List<Transaction> Transactions { get; set; } = new();

    private bool _isLoading = true;
    private List<ChartSeries> _transactionFlowSeries = new();
    private List<ChartSeries> _incomeVsExpensesSeries = new();
    private double[] _debtDistributionData = Array.Empty<double>();
    private string[] _debtStatusLabels = Array.Empty<string>();
    private double[] _categorySpendingData = Array.Empty<double>();
    private string[] _categoryLabels = Array.Empty<string>();
    private string[] _monthLabels = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _isLoading = true;
            await LoadChartDataAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadChartDataAsync()
    {
        if (!Transactions.Any()) return;

        await Task.Run(() =>
        {
            var monthlyData = GetMonthlyTransactionData();
            LoadTransactionFlowChart(monthlyData);
            LoadIncomeExpensesChart(monthlyData);
            LoadDebtDistributionChart();
            LoadCategorySpendingChart();
        });
    }

    private List<MonthlyTransactionData> GetMonthlyTransactionData()
    {
        return Transactions
            .GroupBy(t => new { t.Date.Year, t.Date.Month })
            .OrderBy(g => g.Key.Year)
            .ThenBy(g => g.Key.Month)
            .Select(g => new MonthlyTransactionData
            {
                YearMonth = $"{g.Key.Year}/{g.Key.Month:00}",
                Inflow = g.Where(t => t.Type == TransactionsStatus.Inflow).Sum(t => (double)t.Amount),
                Outflow = g.Where(t => t.Type == TransactionsStatus.Outflow).Sum(t => (double)t.Amount),
                Balance = g.Where(t => t.Type == TransactionsStatus.Inflow).Sum(t => (double)t.Amount) -
                         g.Where(t => t.Type == TransactionsStatus.Outflow).Sum(t => (double)t.Amount)
            })
            .ToList();
    }

    private void LoadTransactionFlowChart(List<MonthlyTransactionData> monthlyData)
    {
        _monthLabels = monthlyData.Select(d => d.YearMonth).ToArray();
        _transactionFlowSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Income", Data = monthlyData.Select(d => d.Inflow).ToArray() },
            new ChartSeries { Name = "Expenses", Data = monthlyData.Select(d => d.Outflow).ToArray() },
            new ChartSeries { Name = "Balance", Data = monthlyData.Select(d => d.Balance).ToArray() }
        };
    }

    private void LoadIncomeExpensesChart(List<MonthlyTransactionData> monthlyData)
    {
        _incomeVsExpensesSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Income", Data = monthlyData.Select(d => d.Inflow).ToArray() },
            new ChartSeries { Name = "Expenses", Data = monthlyData.Select(d => d.Outflow).ToArray() }
        };
    }

    private void LoadDebtDistributionChart()
    {
        var debtData = new[]
        {
            ("Pending", Transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtsStatus == DebtsStatus.Pending)),
            ("Paid", Transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtsStatus == DebtsStatus.Paid)),
            ("Overdue", Transactions.Where(t => t.Type == TransactionsStatus.Debt && t.DebtsStatus == DebtsStatus.Overdue))
        }
        .Select(x => (x.Item1, Amount: x.Item2.Sum(t => (double)t.Amount)))
        .Where(x => x.Amount > 0)
        .ToList();

        _debtDistributionData = debtData.Select(x => x.Amount).ToArray();
        _debtStatusLabels = debtData.Select(x => x.Item1).ToArray();
    }

    private void LoadCategorySpendingChart()
    {
        var categorySpending = Transactions
            .Where(t => t.Type == TransactionsStatus.Outflow)
            .GroupBy(t => t.Tags.FirstOrDefault() ?? "Uncategorized")
            .Select(g => new { Category = g.Key, Amount = (double)g.Sum(t => t.Amount) })
            .Where(x => x.Amount > 0)
            .OrderByDescending(x => x.Amount)
            .ToList();

        _categorySpendingData = categorySpending.Select(c => c.Amount).ToArray();
        _categoryLabels = categorySpending.Select(c => c.Category).ToArray();
    }

    private class MonthlyTransactionData
    {
        public string YearMonth { get; set; }
        public double Inflow { get; set; }
        public double Outflow { get; set; }
        public double Balance { get; set; }
    }
}
