@page "/charts"
@using System.Linq
@using MyPocketTrack.Components.Models

<div>
    <MudGrid>
        <!-- Complex Transaction Flow Chart -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Transaction Flow Analysis</MudText>
                <MudChart ChartType="ChartType.Line" 
                         ChartSeries="@GetTransactionFlowSeries()"
                         XAxisLabels="@GetTransactionDates()" 
                         Width="100%" Height="350px">
                    <CustomGraphics>
                        <MudText Typo="Typo.h6">Transaction Trends Over Time</MudText>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>

        <!-- Debt Analysis Stacked Bar Chart -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Debt Status Distribution</MudText>
                <MudChart ChartType="ChartType.Bar" 
                         ChartSeries="@GetDebtStatusSeries()"
                         XAxisLabels="@GetDebtCategories()"
                         Width="100%" Height="350px">
                    <CustomGraphics>
                        <MudText Typo="Typo.h6">Debt Distribution by Status and Category</MudText>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>

        <!-- Category-wise Spending Donut Chart -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Category-wise Spending</MudText>
                <MudChart ChartType="ChartType.Donut" 
                         InputData="@GetCategorySpendingData()"
                         InputLabels="@GetCategoryLabels()"
                         Width="100%" Height="350px">
                    <CustomGraphics>
                        <MudText Typo="Typo.h6">Expense Distribution by Category</MudText>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>

        <!-- Monthly Balance Trend -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Monthly Balance Trend</MudText>
                <MudChart ChartType="ChartType.Bar" 
                         ChartSeries="@GetMonthlyBalanceSeries()"
                         XAxisLabels="@GetMonthLabels()"
                         Width="100%" Height="350px">
                    <CustomGraphics>
                        <MudText Typo="Typo.h6">Net Balance Progression</MudText>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    [Parameter]
    public List<Transaction> Transactions { get; set; }

    private List<ChartSeries> GetTransactionFlowSeries()
    {
        var dates = Transactions.OrderBy(t => t.Date)
            .Select(t => t.Date.Date)
            .Distinct()
            .ToList();

        var inflowData = dates.Select(date => 
                Transactions.Where(t => t.Date.Date == date && t.Type == TransactionType.Inflow)
                    .Sum(t => t.Amount))
            .ToArray();

        var outflowData = dates.Select(date => 
                Transactions.Where(t => t.Date.Date == date && t.Type == TransactionType.Outflow)
                    .Sum(t => t.Amount))
            .ToArray();

        var balanceData = new double[dates.Count];
        double runningBalance = 0;
        for(int i = 0; i < dates.Count; i++)
        {
            runningBalance += (double)(inflowData[i] - outflowData[i]);
            balanceData[i] = runningBalance;
        }

        return new List<ChartSeries>
        {
            new ChartSeries { Name = "Inflow", Data = inflowData.Select(d => (double)d).ToArray() },
            new ChartSeries { Name = "Outflow", Data = outflowData.Select(d => (double)d).ToArray() },
            new ChartSeries { Name = "Balance", Data = balanceData }
        };
    }

    private string[] GetTransactionDates()
    {
        return Transactions.OrderBy(t => t.Date)
                          .Select(t => t.Date.ToString("MM/dd"))
                          .Distinct()
                          .ToArray();
    }

    private List<ChartSeries> GetDebtStatusSeries()
    {
        var statuses = Enum.GetValues(typeof(DebtStatus)).Cast<DebtStatus>();
        return statuses.Select(status =>
            new ChartSeries
            {
                Name = status.ToString(),
                Data = Transactions.Where(t => t.IsDebt && t.DebtStatus == status)
                    .GroupBy(t => t.Tags.FirstOrDefault() ?? "Uncategorized")
                    .OrderBy(g => g.Key)
                    .Select(g => (double)g.Sum(t => t.Amount))
                    .ToArray()
            }).ToList();  // Note the ToList() here
    }

    private string[] GetDebtCategories()
    {
        return Transactions.Where(t => t.IsDebt)
                          .SelectMany(t => t.Tags)
                          .Distinct()
                          .OrderBy(t => t)
                          .ToArray();
    }

    private double[] GetCategorySpendingData()
    {
        return Transactions.Where(t => t.Type == TransactionType.Outflow)
                          .GroupBy(t => t.Tags.FirstOrDefault() ?? "Uncategorized")
                          .OrderByDescending(g => g.Sum(t => t.Amount))
                          .Select(g => (double)g.Sum(t => t.Amount))
                          .ToArray();
    }

    private string[] GetCategoryLabels()
    {
        return Transactions.Where(t => t.Type == TransactionType.Outflow)
                          .SelectMany(t => t.Tags)
                          .Distinct()
                          .OrderByDescending(t => 
                              Transactions.Where(tr => tr.Tags.Contains(t))
                                        .Sum(tr => tr.Amount))
                          .ToArray();
    }

    private List<ChartSeries> GetMonthlyBalanceSeries()
    {
        var monthlyData = Transactions.GroupBy(t => new { t.Date.Year, t.Date.Month })
            .OrderBy(g => g.Key.Year)
            .ThenBy(g => g.Key.Month)
            .Select(g => new
            {
                Inflow = g.Where(t => t.Type == TransactionType.Inflow).Sum(t => t.Amount),
                Outflow = g.Where(t => t.Type == TransactionType.Outflow).Sum(t => t.Amount),
                Balance = g.Where(t => t.Type == TransactionType.Inflow).Sum(t => t.Amount) -
                          g.Where(t => t.Type == TransactionType.Outflow).Sum(t => t.Amount)
            }).ToList();

        return new List<ChartSeries>
        {
            new ChartSeries { Name = "Net Balance", Data = monthlyData.Select(d => (double)d.Balance).ToArray() }
        };
    }

    private string[] GetMonthLabels()
    {
        return Transactions.GroupBy(t => new { t.Date.Year, t.Date.Month })
                          .OrderBy(g => g.Key.Year)
                          .ThenBy(g => g.Key.Month)
                          .Select(g => $"{g.Key.Year}/{g.Key.Month:00}")
                          .ToArray();
    }
}